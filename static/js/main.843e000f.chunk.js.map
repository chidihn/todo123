{"version":3,"sources":["icon/check.svg","icon/checkdone.svg","icon/tick.svg","component/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoItem","_this$props","this","props","item","onClick","url","check","isComplete","checkdone","react_default","a","createElement","className","classNames","TodoItem-complete","src","height","width","title","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newItem","todoItems","onKeyUp","bind","assertThisInitialized","onChange","_this2","event","index","indexOf","setState","concat","toConsumableArray","slice","objectSpread","keyCode","text","target","value","trim","_this3","_this$state","length","tick","placeholder","type","map","component_TodoItems","key","onItemClicked","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.843e000f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.40eb9cc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/checkdone.d29f1779.svg\";","module.exports = __webpack_public_path__ + \"static/media/tick.c0cbd084.svg\";","import React, { Component } from 'react';\n\nimport classNames from 'classnames';\nimport './TodoItems.css';\nimport check from '../icon/check.svg';\nimport checkdone from '../icon/checkdone.svg';\nclass TodoItem extends Component {\n    render(){\n        const {item,onClick}= this.props;\n        let url = check;\n        if(item.isComplete){\n            url = checkdone;\n        }\n        \n        return(\n            <div onClick = {onClick}  className={classNames('TodoItem',{\n                'TodoItem-complete':item.isComplete\n            })}>\n                <img   src = {url} height={32} width = {32}/>\n                <p>{this.props.item.title}</p>\n            </div>\n        )\n    }\n}\nexport default TodoItem;","import React, { Component } from 'react';\nimport './App.css';\nimport './component/TodoItems';\nimport TodoItem from './component/TodoItems';\nimport tick from './icon/tick.svg'\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      newItem:'',\n      todoItems: [\n      { title:'mua bim bim', isComplete: true},\n      { title:'mua banh' , isComplete: true},\n      {title:'mua keo'}\n    ]};\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n  onItemClicked(item){\n    return (event) => {\n      \n      const isComplete = item.isComplete;\n      const { todoItems }= this.state;\n      const index = todoItems.indexOf(item);\n      this.setState({\n        todoItems:[\n          ...todoItems.slice(0,index),\n          {\n            ...item,\n            isComplete: !isComplete\n          },\n          ...todoItems.slice(index + 1)\n        ]\n      })\n    };\n  }\n  onKeyUp(event){\n    \n    if(event.keyCode === 13){\n      let text = event.target.value  ;\n    if(!text ){\n      return;\n    }\n    text = text.trim();\n    if(!text){ return;}\n    this.setState({\n      newItem : \"\",\n      todoItems: [\n        {title: text, isComplete: false},\n        ...this.state.todoItems\n      ]\n    });\n    } \n  }\n  onChange(event){\n    this.setState({\n      newItem: event.target.value\n    });\n  }  \n  render() {\n    const{ todoItems, newItem}= this.state;\n    \n    if(todoItems.length){\n      return(\n        <div className=\"App\"> \n          <div className = \"Header\">\n            <img className =\"a5\"  src={tick} width= {32} height= {32} />\n            <input className =\"a4\" placeholder=\"What need to be done ?\" \n            type =\"text\" onKeyUp ={this.onKeyUp}\n            onChange = {this.onChange}\n            value ={newItem}/>\n           \n          </div>\n          \n          {\n            todoItems.length >0 && todoItems.map((item,index) => \n            <TodoItem\n            key = {index} \n            item ={item} \n            onClick = {this.onItemClicked(item)} /> )\n          }       \n        </div>\n        );\n      }\n      \n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}